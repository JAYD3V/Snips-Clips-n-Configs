{
  "env": {
    "es2021": true,
    "node": true,
    "browser": false,
    "mocha": false,
    "commonjs": false
  },
  "extends": ["eslint:recommended"],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaVersion": "latest",
    "sourceType": "module"
  },
  "plugins": [],
  "rules": {
    /*
    DEACTIVATED RULES */
    "camelcase": "off",
    "no-console": "off",
    "no-else-return": "off",
    "no-unused-vars": "off",
    "no-control-regex": "off",
    "array-element-newline": "off",
    "no-unused-expressions": "off",
    "no-useless-constructor": "off",
    /*

    TRUE LINTING RULES
    Most linting rules are turned on from extending the "ESLint:Recommended"
    rule-set in the extended property above  */
    "no-lonely-if": ["error"],
    "no-useless-return": ["error"],
    /*

    SPACES & SPACING
    -------------------------------------------------                   */
    "space-infix-ops": ["error"], // Enforces spacing around operators
    "template-curly-spacing": ["error", "never"],
    "array-bracket-spacing": [
      "error",
      "always",
      {
        "objectsInArrays": false
      }
    ],
    "key-spacing": [
      "error",
      {
        "multiLine": {
          "beforeColon": false,
          "afterColon": true
        },
        "align": {
          "beforeColon": true,
          "afterColon": true,
          "on": "colon"
        }
      }
    ],
    "keyword-spacing": [
      "error",
      {
        "after": false,
        "before": true,
        "overrides": {
          "case": {
            "after": true,
            "before": false
          },
          "else": {
            "after": false,
            "before": false
          },
          "return": {
            "after": true,
            "before": true
          },
          "import": {
            "after": true,
            "before": true
          },
          "export": {
            "after": true,
            "before": true
          },
          "from": {
            "after": true,
            "before": true
          },
          "as": {
            "after": true,
            "before": true
          },
          "of": {
            "after": true,
            "before": true
          },
          "in": {
            "after": true,
            "before": true
          }
        }
      }
    ],
    "object-curly-spacing": [
      "error",
      "always",
      {
        "arraysInObjects": false
      }
    ],
    "space-before-function-paren": [
      "error",
      {
        "anonymous": "never",
        "named": "never",
        "asyncArrow": "always"
      }
    ],
    "space-before-blocks": [
      "error",
      {
        "functions": "never",
        "keywords": "always",
        "classes": "never"
      }
    ],
    /*


    LINES, LINE LENGTH & LINE BREAKS
    -------------------------------------------------                   */
    "linebreak-style": ["error", "unix"],
    "function-paren-newline": ["error", "never"], // Keep 1st param on same line as func
    "max-len": [
      "error",
      {
        "code": 90,
        "tabWidth": 2,
        "ignoreUrls": true,
        "ignoreRegExpLiterals": true,
        "ignoreTrailingComments": true,
        "ignoreComments": true
      }
    ],
    "no-multiple-empty-lines": [
      "error",
      {
        "max": 4,
        "maxBOF": 2,
        "maxEOF": 1
      }
    ],
    "object-curly-newline": [
      "error",
      {
        "ObjectExpression": {
          "consistent": true
        },
        "ObjectPattern": {
          "minProperties": 4
        },
        "ImportDeclaration": {
          "minProperties": 4
        },
        "ExportDeclaration": "never"
      }
    ],
    "operator-linebreak": [
      "error",
      "after",
      {
        "overrides": {
          "?": "before",
          ":": "before",
          "||": "before",
          "|": "before",
          "&&": "before",
          "&": "before",
          ">=": "before",
          "<=": "before",
          "==": "before",
          "===": "before"
        }
      }
    ],
    /*

    INDENTATION
    -------------------------------------------------                   */
    "indent": [
      "error",
      2,
      {
        "SwitchCase": 1,
        "offsetTernaryExpressions": true,
        "flatTernaryExpressions": false,
        "FunctionExpression": {
          "body": 1,
          "parameters": "first" // Aligns fn params into a column
        },
        "FunctionDeclaration": {
          "body": 1,
          "parameters": "first" // Aligns fn params into a column
        },
        "CallExpression": {
          "arguments": "first"
        },
        "VariableDeclarator": "first",
        "ObjectExpression": "first",
        "ImportDeclaration": "first",
        "ArrayExpression": "first",
        "MemberExpression": 2
      }
    ],
    /*

    COMMAS, SEMI-COLONS & QUOTATION MARKS
    -------------------------------------------------                   */
    "comma-style": ["error", "last"],
    "comma-dangle": ["error", "never"],
    "semi": ["error", "always"],
    "quotes": [
      "error",
      "single",
      {
        "allowTemplateLiterals": true
      }
    ]
  }
}
